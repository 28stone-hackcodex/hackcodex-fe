//? you can use `eslint-nibble` package to show selected warns and errors only
//? command: `lint:nibble`

{
  "root": true,
  "env": {
    "commonjs": true,
    "es6": true,
    "node": true
  },

  "plugins": [
    "@typescript-eslint",
    "import",
    "unicorn", // it requires fix version to be set in package.json, otherwise there will be an error on eslint run
    "deprecation",
    "regexp",
    "testing-library",
    "prettier",
    "no-relative-import-paths"
  ],
  "extends": [
    "airbnb",
    "airbnb/hooks",
    "airbnb-typescript",
    "prettier",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:sonarjs/recommended",
    "plugin:regexp/recommended"
  ],

  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },

  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module",
    "ecmaFeatures": {
      "modules": true
    },
    "project": "tsconfig.eslint.json"
  },

  "settings": {
    "react": {
      "version": "detect"
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "tsconfig.json"
      }
    }
  },

  "rules": {
    "@typescript-eslint/array-type": "warn",
    "@typescript-eslint/ban-types": [
      "warn",
      {
        "types": {
          "object": false,
          "{}": false,

          "FC": {
            "message": "Please use `({ prop }: Props) => { ... }` instead."
          },
          "React.FC": {
            "message": "Please use `({ prop }: Props) => { ... }` instead."
          }
        }
      }
    ],
    "@typescript-eslint/camelcase": "off",
    "@typescript-eslint/consistent-type-imports": [
      "warn",
      {
        "fixStyle": "inline-type-imports",
        "prefer": "type-imports"
      }
    ],
    "@typescript-eslint/dot-notation": "warn",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/indent": "off",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/member-delimiter-style": "off",
    "@typescript-eslint/naming-convention": [
      "warn",
      {
        "custom": {
          "match": false,
          "regex": "^I[A-Z]"
        },
        "format": ["PascalCase"],
        "selector": ["interface", "typeAlias"]
      },
      {
        "custom": {
          "match": false,
          // there no way to add a custom message therefore I added it directly to RegExp
          "regex": "^on[A-Z] ?(?: Handlers have to be named with prefix `handler*` :?)?"
        },
        "format": ["camelCase", "UPPER_CASE", "PascalCase"],
        "selector": ["function", "variable"],
        "types": ["function"]
      }
    ],
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-floating-promises": [
      "error",
      {
        "ignoreIIFE": true,
        "ignoreVoid": true
      }
    ],
    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": {
          "arguments": true,
          "attributes": false,
          "properties": false,
          "returns": true,
          "variables": true
        }
      }
    ],
    "@typescript-eslint/no-namespace": "off",
    "@typescript-eslint/no-parameter-properties": "off",
    "@typescript-eslint/no-redeclare": "off",
    "@typescript-eslint/no-shadow": [
      // it can warn enum keys if there is a variable with same name
      // it is expected behavior because of enums with number values
      // it can't be turned off separately and therefore you can disable
      // this rule for line or whole file in this cases
      "warn",
      {
        "hoist": "all",
        "ignoreTypeValueShadow": true
      }
    ],
    "@typescript-eslint/no-unnecessary-type-assertion": "warn",
    "@typescript-eslint/no-unsafe-argument": "warn",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-return": "off",
    "@typescript-eslint/no-unused-expressions": [
      "warn",
      {
        "allowShortCircuit": true
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "args": "after-used",
        // "argsIgnorePattern": "^_",
        "vars": "all",
        // "varsIgnorePattern": "^_",
        "ignoreRestSiblings": true
      }
    ],
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/prefer-for-of": "off",
    "@typescript-eslint/prefer-function-type": "warn",
    "@typescript-eslint/prefer-includes": "warn",
    "@typescript-eslint/prefer-optional-chain": "warn",
    "@typescript-eslint/quotes": "off",
    "@typescript-eslint/require-await": "off",
    "@typescript-eslint/restrict-template-expressions": [
      "warn",
      {
        "allowAny": true,
        "allowBoolean": true,
        "allowNullish": true,
        "allowNumber": true,
        "allowRegExp": false
      }
    ],
    "@typescript-eslint/return-await": ["warn", "in-try-catch"],
    "@typescript-eslint/semi": "off",
    "@typescript-eslint/type-annotation-spacing": "off",
    "@typescript-eslint/typedef": "off",
    "@typescript-eslint/unbound-method": "off",
    "@typescript-eslint/unified-signatures": "off",

    "deprecation/deprecation": "warn",

    "import/default": "warn",
    "import/export": "warn",
    "import/exports-last": "off",
    "import/extensions": "off",
    "import/first": "warn",
    "import/group-exports": "off",
    "import/named": "warn",
    "import/newline-after-import": "warn",
    "import/no-absolute-path": "error",
    "import/no-amd": "warn",
    "import/no-anonymous-default-export": "warn",
    "import/no-commonjs": "warn",
    "import/no-cycle": "off",
    "import/no-deprecated": "warn",
    "import/no-duplicates": "warn",
    "import/no-dynamic-require": "error",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [
          "**/*.{test,spec}.{ts,tsx}",
          "**/__mocks__/**/*",
          "vite.config.ts",
          "vitestSetup.ts",
          "src/utils/testUtils.tsx"
        ]
      }
    ],
    "import/no-internal-modules": "off",
    "import/no-named-as-default": "warn",
    "import/no-named-default": "off",
    "import/no-self-import": "error",
    "import/no-unused-modules": "off",
    "import/no-useless-path-segments": "warn",
    "import/order": "off",
    "import/prefer-default-export": "off",

    "jsx-a11y/click-events-have-key-events": "off",
    "jsx-a11y/no-noninteractive-element-to-interactive-role": "off",
    "jsx-a11y/no-static-element-interactions": "off",

    "no-relative-import-paths/no-relative-import-paths": [
      "warn",
      {
        "allowSameFolder": true,
        "prefix": "@",
        "rootDir": "src"
      }
    ],

    "prettier/prettier": "off",

    "react/destructuring-assignment": "warn",
    "react/jsx-no-duplicate-props": "warn",
    "react/display-name": "warn",
    "react/function-component-definition": "off",
    "react/jsx-boolean-value": "warn",
    "react/jsx-curly-brace-presence": "warn",
    "react/jsx-filename-extension": "off",
    "react/jsx-fragments": "warn",
    "react/jsx-handler-names": [
      // works for class components only
      "warn",
      {
        "checkInlineFunction": false,
        "checkLocalVariables": false,
        "eventHandlerPrefix": "handle",
        "eventHandlerPropPrefix": "on"
      }
    ],
    "react/jsx-no-bind": "off",
    "react/jsx-no-constructed-context-values": "warn",
    "react/jsx-no-useless-fragment": [
      "warn",
      {
        "allowExpressions": true
      }
    ],
    "react/jsx-props-no-spreading": "off",
    "react/jsx-uses-react": "off",
    "react/no-array-index-key": "warn",
    "react/no-unstable-nested-components": "warn",
    "react/no-unused-prop-types": "warn",
    "react/prop-types": "off",
    "react/react-in-jsx-scope": "off",
    "react/require-default-props": "off",
    "react/self-closing-comp": "warn",

    "regexp/no-super-linear-backtracking": "warn",
    "regexp/no-unused-capturing-group": "warn",
    "regexp/optimal-quantifier-concatenation": "warn",

    // "sonarjs/cognitive-complexity": ["warn", 16],
    "sonarjs/elseif-without-else": "off",
    "sonarjs/max-switch-cases": "off",
    "sonarjs/no-all-duplicated-branches": "warn",
    "sonarjs/no-collapsible-if": "off",
    "sonarjs/no-collection-size-mischeck": "warn",
    "sonarjs/no-duplicate-string": "off",
    "sonarjs/no-duplicated-branches": "warn",
    "sonarjs/no-element-overwrite": "warn",
    "sonarjs/no-empty-collection": "off",
    "sonarjs/no-extra-arguments": "off",
    "sonarjs/no-gratuitous-expressions": "warn",
    "sonarjs/no-identical-conditions": "warn",
    "sonarjs/no-identical-expressions": "warn",
    "sonarjs/no-identical-functions": "warn",
    "sonarjs/no-ignored-return": "warn",
    "sonarjs/no-inverted-boolean-check": "warn",
    "sonarjs/no-nested-switch": "warn",
    "sonarjs/no-nested-template-literals": "off",
    "sonarjs/no-one-iteration-loop": "warn",
    "sonarjs/no-redundant-boolean": "warn",
    "sonarjs/no-redundant-jump": "off",
    "sonarjs/no-same-line-conditional": "off",
    "sonarjs/no-small-switch": "warn",
    "sonarjs/no-unused-collection": "warn",
    "sonarjs/no-use-of-empty-return-value": "warn",
    "sonarjs/no-useless-catch": "warn",
    "sonarjs/non-existent-operator": "warn",
    "sonarjs/prefer-immediate-return": "off",
    "sonarjs/prefer-object-literal": "warn",
    "sonarjs/prefer-single-boolean-return": "off",
    "sonarjs/prefer-while": "warn",

    "unicorn/catch-error-name": [
      "warn",
      {
        "ignore": ["[Ee]rr"],
        "name": "err"
      }
    ],
    "unicorn/no-array-push-push": "warn",
    "unicorn/no-invalid-remove-event-listener": "warn",
    "unicorn/no-useless-fallback-in-spread": "warn",
    "unicorn/no-useless-length-check": "warn",
    "unicorn/no-useless-promise-resolve-reject": "warn",
    "unicorn/prefer-array-find": "warn",
    "unicorn/prefer-array-flat-map": "warn",
    "unicorn/prefer-array-index-of": "warn",
    "unicorn/prefer-array-some": "warn",
    "unicorn/prefer-date-now": "warn",
    "unicorn/prefer-includes": "warn",
    "unicorn/prefer-logical-operator-over-ternary": "warn",
    "unicorn/prefer-negative-index": "warn",
    "unicorn/prefer-optional-catch-binding": "warn",
    "unicorn/prefer-regexp-test": "warn",
    "unicorn/prefer-spread": "warn",
    "unicorn/prefer-string-slice": "warn",
    "unicorn/prefer-switch": "warn",

    //* Native rules
    "arrow-body-style": "off",
    "arrow-parens": "off",
    "camelcase": "off",
    "class-methods-use-this": "off",
    "comma-dangle": "off",
    "comma-spacing": "off",
    "complexity": "off",
    "consistent-return": "off",
    "constructor-super": "error",
    "curly": ["warn", "all"],
    "default-case": "off",
    "dot-notation": "off",
    "eol-last": "off",
    "eqeqeq": ["warn", "always"],
    "func-style": ["warn", "declaration", { "allowArrowFunctions": true }],
    "function-paren-newline": "off",
    "guard-for-in": "warn",
    "id-blacklist": ["warn", "any", "Number", "number", "String", "string", "Boolean", "boolean", "Undefined", "debug"],
    "id-length": [
      "warn",
      {
        "min": 2,
        "exceptions": ["_", "i", "j", "a", "b", "x", "y", "z"],
        "properties": "never"
      }
    ],
    "id-match": "warn",
    "implicit-arrow-linebreak": "off",
    "indent": "off",
    "keyword-spacing": "off",
    "linebreak-style": "off",
    "lines-between-class-members": "off",
    "max-classes-per-file": ["warn", 1],
    "max-len": "off",
    "new-cap": "off",
    "new-parens": "off",
    "newline-per-chained-call": "off",
    "no-await-in-loop": "off",
    "no-bitwise": "error",
    "no-caller": "error",
    "no-cond-assign": "error",
    "no-confusing-arrow": "off",
    "no-console": ["warn", { "allow": ["warn", "error"] }],
    "no-continue": "off",
    "no-debugger": "warn",
    "no-duplicate-imports": "off",
    "no-else-return": "off",
    "no-empty": "error",
    "no-empty-pattern": "warn",
    "no-eval": "error",
    "no-extra-boolean-cast": "off",
    "no-extra-semi": "off",
    "no-fallthrough": "off",
    "no-invalid-this": "off",
    "no-irregular-whitespace": "off",
    "no-lone-blocks": "off",
    "no-multi-spaces": "off",
    "no-multiple-empty-lines": "off",
    // "no-nested-ternary": "warn",
    "no-new-wrappers": "error",
    "no-param-reassign": [
      "error",
      {
        "props": true,
        // for arrays `reducer`
        "ignorePropertyModificationsFor": ["acc"],
        "ignorePropertyModificationsForRegex": ["Ref$"]
      }
    ],
    "no-plusplus": "off",
    "no-promise-executor-return": "warn",
    "no-prototype-builtins": "off",
    "no-redeclare": "off",
    "no-restricted-globals": ["error", "event", "fdescribe"],
    "no-restricted-syntax": ["warn", "FunctionDeclaration", "WithStatement"],
    "no-return-await": "off",
    "no-shadow": "off",
    "no-throw-literal": "error",
    "no-trailing-spaces": "off",
    "no-undef": "off",
    "no-undef-init": "off",
    "no-underscore-dangle": "warn",
    "no-unneeded-ternary": "warn",
    "no-unsafe-finally": "warn",
    "no-unused-expressions": "off",
    "no-unused-labels": "warn",
    "no-unused-vars": "off",
    "no-use-before-define": "off",
    "no-useless-computed-key": "warn",
    "no-useless-constructor": "warn",
    "no-useless-return": "off",
    "no-void": ["error", { "allowAsStatement": true }],
    "object-curly-newline": "off",
    "object-curly-spacing": "off",
    "object-shorthand": "warn",
    "one-var": ["warn", "never"],
    "operator-linebreak": "off",
    "padded-blocks": "off",
    "prefer-arrow-callback": "warn",
    "prefer-destructuring": "off",
    "prefer-template": "warn",
    "quote-props": "off",
    "quotes": "off",
    "radix": "warn",
    "semi": "off",
    "sort-imports": "off",
    "sort-keys": "off",
    "space-before-function-paren": "off",
    "space-in-parens": "off",
    "spaced-comment": [
      "warn",
      "always",
      {
        "exceptions": ["-", "+", "="],
        "markers": ["/", "*", "!", "?"]
      }
    ],
    "use-isnan": "warn",
    "valid-typeof": "off",
    "yoda": "warn"
  },

  "overrides": [
    {
      "files": ["**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}", "**/__mocks__/**/*"],
      "extends": ["plugin:testing-library/react"],
      "rules": {
        "@typescript-eslint/naming-convention": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-throw-literal": "off",
        "@typescript-eslint/no-unsafe-argument": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-unused-vars": "off",

        // do not off `import/no-extraneous-dependencies` rule here
        // update `devDependencies` option in that rule instead

        "sonarjs/no-duplicate-string": "off",
        "sonarjs/no-identical-functions": "off",

        "testing-library/no-node-access": "off",
        "testing-library/prefer-screen-queries": "off",

        "no-empty": "off",
        "no-param-reassign": "off",
        "no-script-url": "off",
        "no-throw-literal": "off",
        "no-underscore-dangle": "off"
      }
    },
    {
      "files": ["**/*.stories.*"],
      "rules": {
        "import/no-anonymous-default-export": "off"
      }
    }
  ]
}
